{"version":3,"sources":["components/PostsList/PostsList.tsx","api/api.ts","api/comments.ts","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","api/posts.ts","App.tsx","index.tsx"],"names":["PostsList","postsList","onPostSelect","selectedPost","className","map","post","userId","title","type","onClick","id","BASE_URL","getPostComments","postId","fetch","then","response","json","removeComment","commentId","url","method","addComment","comment","data","headers","body","JSON","stringify","NewCommentForm","fetchComments","useState","userName","setUserName","userEmail","setUserEmail","commentBody","setComment","postComment","a","name","email","clearAllFields","useCallback","onFormSubmit","e","preventDefault","length","test","required","value","onChange","target","placeholder","PostDetails","postComments","setPostComments","shouldShowComments","setShouldShowComments","deleteComment","fetchPostComments","useEffect","error","Error","getAllPosts","App","setPostsList","visiblePosts","setVisiblePosts","selectedPostId","setSelectedPostId","setSelectedPost","fetchPosts","find","fetchUser","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f741fca0.chunk.js","sourcesContent":["import React from 'react';\nimport { PostListProps } from '../../types';\nimport './PostsList.scss';\n\nexport const PostsList: React.FC<PostListProps> = ({\n  postsList, onPostSelect, selectedPost,\n}) => {\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\">\n        {postsList.map(post => (\n          <li className=\"PostsList__item\" key={post.id}>\n            <div>\n              <b>\n                {`User #${post.userId}`}\n                :\n                {' '}\n              </b>\n              {post.title}\n            </div>\n            <button\n              type=\"button\"\n              className=\"PostsList__button button\"\n              onClick={() => onPostSelect(post.id)}\n            >\n              {selectedPost === post ? 'Close' : 'Open'}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import { Comment } from '../types';\n\nexport const BASE_URL = 'https://mate.academy/students-api';\n\nexport function remove(url: string) {\n  return fetch(BASE_URL + url, { method: 'DELETE' })\n    .then(response => response.json());\n}\n\nexport const add = (url: string, data: Comment) => {\n  return fetch(BASE_URL + url, {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(data),\n  })\n    .then(response => response.json());\n};\n","import { BASE_URL, remove, add } from './api';\nimport { Comment } from '../types';\n\nexport const getPostComments = (postId: number) => {\n  return fetch(`${BASE_URL}/comments?postId=${postId}`)\n    .then(response => response.json());\n};\n\nexport const removeComment = (\n  commentId: number | undefined,\n) => {\n  return remove(`/comments/${commentId}`);\n};\n\nexport const addComment = (\n  comment: Comment,\n) => {\n  return add('/comments', comment);\n};\n","import React, { useCallback, useState } from 'react';\nimport { addComment } from '../../api/comments';\nimport { NewCommentFormProps } from '../../types';\nimport './NewCommentForm.scss';\n\nexport const NewCommentForm: React.FC<NewCommentFormProps> = ({\n  postId, fetchComments,\n}) => {\n  const [userName, setUserName] = useState('');\n  const [userEmail, setUserEmail] = useState('');\n  const [commentBody, setComment] = useState('');\n\n  const postComment = async () => {\n    await addComment({\n      name: userName,\n      email: userEmail,\n      body: commentBody,\n      postId,\n      id: 0,\n    });\n  };\n\n  const validateForm = () => {\n    // eslint-disable-next-line max-len\n    const emailRegex = /^([a-zA-Z0-9_\\-.]+)@([a-zA-Z0-9_\\-.]+)\\.([a-zA-Z]{2,5})$/;\n    const formIsValid = userName.length && commentBody.length\n    && emailRegex.test(userEmail);\n\n    if (formIsValid) {\n      return true;\n    }\n\n    return false;\n  };\n\n  const clearAllFields = useCallback(() => {\n    setUserName('');\n    setUserEmail('');\n    setComment('');\n  }, []);\n\n  const onFormSubmit = async (\n    e: React.MouseEvent<HTMLButtonElement, MouseEvent>,\n  ) => {\n    e.preventDefault();\n\n    if (validateForm()) {\n      await postComment();\n      fetchComments();\n      clearAllFields();\n    }\n  };\n\n  return (\n    <form className=\"NewCommentForm\">\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          required\n          value={userName}\n          onChange={({ target }) => setUserName(target.value)}\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          required\n          value={userEmail}\n          onChange={({ target }) => setUserEmail(target.value)}\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          value={commentBody}\n          required\n          onChange={({ target }) => setComment(target.value)}\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n        onClick={(e) => onFormSubmit(e)}\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport { getPostComments, removeComment } from '../../api/comments';\nimport { PostDetailsProps, Comment } from '../../types';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\nexport const PostDetails: React.FC<PostDetailsProps> = ({ post }) => {\n  const [postComments, setPostComments] = useState<Comment[]>();\n  const [shouldShowComments, setShouldShowComments] = useState(true);\n\n  const deleteComment = async (commentId: number) => {\n    await removeComment(commentId);\n    if (post) {\n      setPostComments(await getPostComments(post.id));\n    }\n  };\n\n  const fetchPostComments = async () => {\n    if (!post?.id) {\n      return;\n    }\n\n    setPostComments(await getPostComments(post.id));\n  };\n\n  useEffect(() => {\n    try {\n      fetchPostComments();\n    } catch (error) {\n      throw new Error();\n    }\n  }, [post]);\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{post?.title}</p>\n      </section>\n\n      <section\n        className=\"PostDetails__comments\"\n        data-cy=\"postDetails\"\n      >\n        {postComments?.length ? (\n          <button\n            type=\"button\"\n            className=\"button\"\n            onClick={() => {\n              setShouldShowComments(!shouldShowComments);\n            }}\n          >\n            {shouldShowComments ? 'Hide' : 'Show'}\n            {' '}\n            {postComments?.length}\n            {' '}\n            comments\n          </button>\n        ) : (\n          <p>Add first comment</p>\n        )}\n\n        <ul className=\"PostDetails__list\">\n          {shouldShowComments && (\n            postComments?.map(comment => (\n              <li className=\"PostDetails__list-item\" key={comment.id}>\n                <button\n                  type=\"button\"\n                  className=\"PostDetails__remove-button button\"\n                  onClick={() => deleteComment(comment.id)}\n                >\n                  X\n                </button>\n                <p>{comment.body}</p>\n              </li>\n            ))\n          )}\n        </ul>\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            postId={post?.id || null}\n            fetchComments={fetchPostComments}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n","import { BASE_URL } from './api';\n\nexport const getAllPosts = () => {\n  return fetch(`${BASE_URL}/posts`)\n    .then(response => response.json());\n};\n\nexport const getUserPosts = (userId: number) => {\n  return fetch(`${BASE_URL}/posts?userId=${userId}`)\n    .then(response => response.json());\n};\n\nexport const getPostDetails = (postId: number) => {\n  return fetch(`${BASE_URL}/posts/${postId}`)\n    .then(response => response.json());\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getAllPosts, getUserPosts } from './api/posts';\nimport { Post } from './types';\n\nconst App: React.FC = () => {\n  const [postsList, setPostsList] = useState<Post[]>([]);\n  const [visiblePosts, setVisiblePosts] = useState<Post[]>([]);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n  const [selectedPost, setSelectedPost] = useState<Post>();\n\n  useEffect(() => {\n    const fetchPosts = async () => {\n      setPostsList(await getAllPosts());\n      setVisiblePosts(await getAllPosts());\n    };\n\n    try {\n      fetchPosts();\n    } catch (error) {\n      throw new Error();\n    }\n  }, []);\n\n  useEffect(() => {\n    setSelectedPost(visiblePosts\n      .find(post => post.id === selectedPostId));\n  }, [selectedPostId]);\n\n  const onPostSelect = (postId: number) => {\n    if (postId !== selectedPostId) {\n      setSelectedPostId(postId);\n    } else {\n      setSelectedPostId(0);\n    }\n  };\n\n  const fetchUser = async (id: number) => {\n    if (id === 0) {\n      setVisiblePosts(postsList);\n\n      return;\n    }\n\n    setVisiblePosts(await getUserPosts(id));\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            onChange={({ target }) => fetchUser(+target.value)}\n          >\n            <option value=\"0\">All users</option>\n            <option value=\"1\">Leanne Graham</option>\n            <option value=\"2\">Ervin Howell</option>\n            <option value=\"3\">Clementine Bauch</option>\n            <option value=\"4\">Patricia Lebsack</option>\n            <option value=\"5\">Chelsey Dietrich</option>\n            <option value=\"6\">Mrs. Dennis Schulist</option>\n            <option value=\"7\">Kurtis Weissnat</option>\n            <option value=\"8\">Nicholas Runolfsdottir V</option>\n            <option value=\"9\">Glenna Reichert</option>\n            <option value=\"10\">Leanne Graham</option>\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            postsList={visiblePosts}\n            onPostSelect={onPostSelect}\n            selectedPost={selectedPost}\n          />\n        </div>\n        {selectedPost && (\n          <div className=\"App__content\">\n            <PostDetails post={selectedPost || null} />\n          </div>\n        )}\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}